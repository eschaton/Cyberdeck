//
//  Cyber180CPInstructions_Internal.h
//  Cyber
//
//  Copyright Â© 2025 Christopher M. Hanson
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

#include <Cyber/Cyber180CPInstructions.h>


#ifndef __CYBER_CYBER180CPINSTRUCTIONS_INTERNAL_H__
#define __CYBER_CYBER180CPINSTRUCTIONS_INTERNAL_H__

CYBER_HEADER_BEGIN

/// Type of a Cyber 180 Central Processor instruction, derived from its opcode.
enum Cyber180CPInstructionType {
    Cyber180CPInstructionType_jk = 0,
    Cyber180CPInstructionType_jkiD = 1,
    Cyber180CPInstructionType_SjkiD = 2,
    Cyber180CPInstructionType_jkQ = 3,
};


// MARK: - Instruction Implementation Utilities

/// Get the instruciton type of the given instruction word.
CYBER_EXPORT enum Cyber180CPInstructionType Cyber180CPGetInstructionType(union Cyber180CPInstructionWord instructionWord);

/// Indicate whether the given value is in the given range.
CYBER_EXPORT bool IN_RANGE(uint8_t value, uint8_t lower, uint8_t upper);

/// Get the type of the instruction given the instruction word.
CYBER_EXPORT enum Cyber180CPInstructionType Cyber180CPGetInstructionType(union Cyber180CPInstructionWord instructionWord);

/// The amount of space, in bytes, taken by a specific instruction.
CYBER_EXPORT CyberWord64 Cyber180CPInstructionAdvance(union Cyber180CPInstructionWord instructionWord);

/// Sign-extend a 16-bit word to a 32-bit word.
CYBER_EXPORT int32_t Signed32FromSigned16ViaExtend(int16_t word16);

/// Sign-extend a 16-bit word to a 64-bit word.
CYBER_EXPORT int64_t Signed64FromSigned16ViaExtend(int16_t word16);

/// Create a bit mask given a starting bit and length.
///
/// Create a mask given a starting bit position (recalling that bits are numbered 0...63 from left to right, where 0 is the MSB). As an example:
///
/// ```
/// CalculateBitMask(2,5) -> 0b00111110_00000000_00000000_00000000_00000000_00000000_00000000_00000000
/// ```
///
CYBER_EXPORT CyberWord64 Cyber180CPInstruction_CalculateBitMask(CyberWord64 bit_pos, CyberWord64 bit_len);

/// Calculate `Aj` displaced by (signed) `8*Q`.
CYBER_EXPORT CyberWord48 Cyber180CPInstruction_CalculateAddressUsingSignedDisplacement16(CyberWord48 Aj, CyberWord16 Q);

/// Calculate `Aj` displaced by `D` and indexed by `XiR`.
CYBER_EXPORT CyberWord48 Cyber180CPInstruction_CalculateAddressUsingIndex32WithDisplacement12(CyberWord48 Aj, CyberWord32 XiR, CyberWord12 D);

/// Calculate `Aj` displaced by `8*D` and indexed by `8*XiR`.
CYBER_EXPORT CyberWord48 Cyber180CPInstruction_CalculateAddressUsingIndex32WithDisplacement12Times8(CyberWord48 Aj, CyberWord32 XiR, CyberWord12 D);


// MARK: - Instruction Declarations

#define CYBER_180_CP_DECLARE_INSTRUCTION(mn) \
    CyberWord64 Cyber180CPInstruction_ ##mn (struct Cyber180CP *processor, union Cyber180CPInstructionWord word, CyberWord64 address)


CYBER_180_CP_DECLARE_INSTRUCTION(HALT); // 0x00
CYBER_180_CP_DECLARE_INSTRUCTION(SYNC); // 0x01
CYBER_180_CP_DECLARE_INSTRUCTION(EXCHANGE); // 0x02
CYBER_180_CP_DECLARE_INSTRUCTION(INTRUPT); // 0x03
CYBER_180_CP_DECLARE_INSTRUCTION(RETURN); // 0x04
CYBER_180_CP_DECLARE_INSTRUCTION(PURGE); // 0x05
CYBER_180_CP_DECLARE_INSTRUCTION(POP); // 0x06
CYBER_180_CP_DECLARE_INSTRUCTION(PSFSA); // 0x07
CYBER_180_CP_DECLARE_INSTRUCTION(CPYTX); // 0x08
CYBER_180_CP_DECLARE_INSTRUCTION(CPYAA); // 0x09
CYBER_180_CP_DECLARE_INSTRUCTION(CPYXA); // 0x0a
CYBER_180_CP_DECLARE_INSTRUCTION(CYPAX); // 0x0b
CYBER_180_CP_DECLARE_INSTRUCTION(CPYRR); // 0x0c
CYBER_180_CP_DECLARE_INSTRUCTION(CPYXX); // 0x0d
CYBER_180_CP_DECLARE_INSTRUCTION(CPYSX); // 0x0e
CYBER_180_CP_DECLARE_INSTRUCTION(CPYXS);  // 0x0f

CYBER_180_CP_DECLARE_INSTRUCTION(INCX); // 0x10
CYBER_180_CP_DECLARE_INSTRUCTION(DECX); // 0x11
// 0x12
// 0x13
CYBER_180_CP_DECLARE_INSTRUCTION(LBSET); // 0x14
// 0x15
CYBER_180_CP_DECLARE_INSTRUCTION(TPAGE); // 0x16
CYBER_180_CP_DECLARE_INSTRUCTION(LPAGE); // 0x17
CYBER_180_CP_DECLARE_INSTRUCTION(IORX); // 0x18
CYBER_180_CP_DECLARE_INSTRUCTION(XORX); // 0x19
CYBER_180_CP_DECLARE_INSTRUCTION(ANDX); // 0x1a
CYBER_180_CP_DECLARE_INSTRUCTION(NOTX); // 0x1b
CYBER_180_CP_DECLARE_INSTRUCTION(INHX); // 0x1c
// 0x1d
CYBER_180_CP_DECLARE_INSTRUCTION(MARK); // 0x1e
CYBER_180_CP_DECLARE_INSTRUCTION(ENTZOS);  // 0x1f

CYBER_180_CP_DECLARE_INSTRUCTION(ADDR); // 0x20
CYBER_180_CP_DECLARE_INSTRUCTION(SUBR); // 0x21
CYBER_180_CP_DECLARE_INSTRUCTION(MULR); // 0x22
CYBER_180_CP_DECLARE_INSTRUCTION(DIVR); // 0x23
CYBER_180_CP_DECLARE_INSTRUCTION(ADDX); // 0x24
CYBER_180_CP_DECLARE_INSTRUCTION(SUBX); // 0x25
CYBER_180_CP_DECLARE_INSTRUCTION(MULX); // 0x26
CYBER_180_CP_DECLARE_INSTRUCTION(DIVX); // 0x27
CYBER_180_CP_DECLARE_INSTRUCTION(INCR); // 0x28
CYBER_180_CP_DECLARE_INSTRUCTION(DECR); // 0x29
CYBER_180_CP_DECLARE_INSTRUCTION(ADDAX); // 0x2a
CYBER_180_CP_DECLARE_INSTRUCTION(CMPR); // 0x2c
CYBER_180_CP_DECLARE_INSTRUCTION(CMPX); // 0x2d
CYBER_180_CP_DECLARE_INSTRUCTION(BRREL); // 0x2e
CYBER_180_CP_DECLARE_INSTRUCTION(BRDIR);  // 0x2f

CYBER_180_CP_DECLARE_INSTRUCTION(ADDF); // 0x30
CYBER_180_CP_DECLARE_INSTRUCTION(SUBF); // 0x31
CYBER_180_CP_DECLARE_INSTRUCTION(MULF); // 0x32
CYBER_180_CP_DECLARE_INSTRUCTION(DIVF); // 0x33
CYBER_180_CP_DECLARE_INSTRUCTION(ADDD); // 0x34
CYBER_180_CP_DECLARE_INSTRUCTION(SUBD); // 0x35
CYBER_180_CP_DECLARE_INSTRUCTION(MULD); // 0x36
CYBER_180_CP_DECLARE_INSTRUCTION(DIVD); // 0x37
CYBER_180_CP_DECLARE_INSTRUCTION(ENTX); // 0x39
CYBER_180_CP_DECLARE_INSTRUCTION(CNIF); // 0x3a
CYBER_180_CP_DECLARE_INSTRUCTION(CNFI); // 0x3b
CYBER_180_CP_DECLARE_INSTRUCTION(CMPF); // 0x3c
CYBER_180_CP_DECLARE_INSTRUCTION(ENTP); // 0x3d
CYBER_180_CP_DECLARE_INSTRUCTION(ENTN); // 0x3e
CYBER_180_CP_DECLARE_INSTRUCTION(ENTL);  // 0x3f

CYBER_180_CP_DECLARE_INSTRUCTION(ADDFV); // 0x40
CYBER_180_CP_DECLARE_INSTRUCTION(SUBFV); // 0x41
CYBER_180_CP_DECLARE_INSTRUCTION(MULFV); // 0x42
CYBER_180_CP_DECLARE_INSTRUCTION(DIVFV); // 0x43
CYBER_180_CP_DECLARE_INSTRUCTION(ADDXV); // 0x44
CYBER_180_CP_DECLARE_INSTRUCTION(SUBXV); // 0x45
CYBER_180_CP_DECLARE_INSTRUCTION(IORV); // 0x48
CYBER_180_CP_DECLARE_INSTRUCTION(XORV); // 0x49
CYBER_180_CP_DECLARE_INSTRUCTION(ANDV); // 0x4a
CYBER_180_CP_DECLARE_INSTRUCTION(CNIFV); // 0x4b
CYBER_180_CP_DECLARE_INSTRUCTION(CNFIV); // 0x4c
CYBER_180_CP_DECLARE_INSTRUCTION(SHFV); // 0x4d

CYBER_180_CP_DECLARE_INSTRUCTION(COMPEQV); // 0x50
CYBER_180_CP_DECLARE_INSTRUCTION(CMPLTV); // 0x51
CYBER_180_CP_DECLARE_INSTRUCTION(CMPGEV); // 0x52
CYBER_180_CP_DECLARE_INSTRUCTION(CMPNEV); // 0x53
CYBER_180_CP_DECLARE_INSTRUCTION(MRGV); // 0x54
CYBER_180_CP_DECLARE_INSTRUCTION(GTHV); // 0x55
CYBER_180_CP_DECLARE_INSTRUCTION(SCTV); // 0x56
CYBER_180_CP_DECLARE_INSTRUCTION(SUMFV); // 0x57
CYBER_180_CP_DECLARE_INSTRUCTION(TPSFV); // 0x58
CYBER_180_CP_DECLARE_INSTRUCTION(TPDFV); // 0x59
CYBER_180_CP_DECLARE_INSTRUCTION(TSPFV); // 0x5a
CYBER_180_CP_DECLARE_INSTRUCTION(TDPFV); // 0x5b
CYBER_180_CP_DECLARE_INSTRUCTION(SUMPFV); // 0x5c
CYBER_180_CP_DECLARE_INSTRUCTION(GTHIV); // 0x5d
CYBER_180_CP_DECLARE_INSTRUCTION(SCTIV); // 0x5e

CYBER_180_CP_DECLARE_INSTRUCTION(ADDN); // 0x70
CYBER_180_CP_DECLARE_INSTRUCTION(SUBN); // 0x71
CYBER_180_CP_DECLARE_INSTRUCTION(MULN); // 0x72
CYBER_180_CP_DECLARE_INSTRUCTION(DIVN); // 0x73
CYBER_180_CP_DECLARE_INSTRUCTION(CMPN); // 0x74
CYBER_180_CP_DECLARE_INSTRUCTION(MOVN); // 0x75
CYBER_180_CP_DECLARE_INSTRUCTION(MOVB); // 0x76
CYBER_180_CP_DECLARE_INSTRUCTION(CMPB); // 0x77

CYBER_180_CP_DECLARE_INSTRUCTION(LMULT); // 0x80
CYBER_180_CP_DECLARE_INSTRUCTION(SMULT); // 0x81
CYBER_180_CP_DECLARE_INSTRUCTION(LX); // 0x82
CYBER_180_CP_DECLARE_INSTRUCTION(SX); // 0x83
CYBER_180_CP_DECLARE_INSTRUCTION(LA); // 0x84
CYBER_180_CP_DECLARE_INSTRUCTION(SA); // 0x85
CYBER_180_CP_DECLARE_INSTRUCTION(LBYTP); // 0x86
CYBER_180_CP_DECLARE_INSTRUCTION(ENTC); // 0x87
CYBER_180_CP_DECLARE_INSTRUCTION(LBIT); // 0x88
CYBER_180_CP_DECLARE_INSTRUCTION(SBIT); // 0x89
CYBER_180_CP_DECLARE_INSTRUCTION(ADDRQ); // 0x8a
CYBER_180_CP_DECLARE_INSTRUCTION(ADDXQ); // 0x8b
CYBER_180_CP_DECLARE_INSTRUCTION(MULRQ); // 0x8c
CYBER_180_CP_DECLARE_INSTRUCTION(ENTE); // 0x8d
CYBER_180_CP_DECLARE_INSTRUCTION(ADDAQ); // 0x8e
CYBER_180_CP_DECLARE_INSTRUCTION(ADDPXQ); // 0x8f

CYBER_180_CP_DECLARE_INSTRUCTION(BRREQ); // 0x90
CYBER_180_CP_DECLARE_INSTRUCTION(BRRNE); // 0x91
CYBER_180_CP_DECLARE_INSTRUCTION(BRRGT); // 0x92
CYBER_180_CP_DECLARE_INSTRUCTION(BRRGE); // 0x93
CYBER_180_CP_DECLARE_INSTRUCTION(BRXEQ); // 0x94
CYBER_180_CP_DECLARE_INSTRUCTION(BRXNE); // 0x95
CYBER_180_CP_DECLARE_INSTRUCTION(BRXGT); // 0x96
CYBER_180_CP_DECLARE_INSTRUCTION(BRXGE); // 0x97
CYBER_180_CP_DECLARE_INSTRUCTION(BRFEQ); // 0x98
CYBER_180_CP_DECLARE_INSTRUCTION(BRFNE); // 0x99
CYBER_180_CP_DECLARE_INSTRUCTION(BRFGT); // 0x9a
CYBER_180_CP_DECLARE_INSTRUCTION(BRFGE); // 0x9b
CYBER_180_CP_DECLARE_INSTRUCTION(BRINC); // 0x9c
CYBER_180_CP_DECLARE_INSTRUCTION(BRSEG); // 0x9d
CYBER_180_CP_DECLARE_INSTRUCTION(BRxxx); // 0x9e
CYBER_180_CP_DECLARE_INSTRUCTION(BRCR);  // 0x9f

CYBER_180_CP_DECLARE_INSTRUCTION(LAI); // 0xa0
CYBER_180_CP_DECLARE_INSTRUCTION(SAI); // 0xa1
CYBER_180_CP_DECLARE_INSTRUCTION(LXI); // 0xa2
CYBER_180_CP_DECLARE_INSTRUCTION(SXI); // 0xa3
CYBER_180_CP_DECLARE_INSTRUCTION(LBYT); // 0xa4
CYBER_180_CP_DECLARE_INSTRUCTION(SBYT); // 0xa5
CYBER_180_CP_DECLARE_INSTRUCTION(ADDAD); // 0xa7
CYBER_180_CP_DECLARE_INSTRUCTION(SHFC); // 0xa8
CYBER_180_CP_DECLARE_INSTRUCTION(SHFX); // 0xa9
CYBER_180_CP_DECLARE_INSTRUCTION(SHFR); // 0xaa
CYBER_180_CP_DECLARE_INSTRUCTION(ISOM); // 0xac
CYBER_180_CP_DECLARE_INSTRUCTION(ISOB); // 0xad
CYBER_180_CP_DECLARE_INSTRUCTION(INSB); // 0xae

CYBER_180_CP_DECLARE_INSTRUCTION(CALLREL); // 0xb0
CYBER_180_CP_DECLARE_INSTRUCTION(KEYPOINT); // 0xb1
CYBER_180_CP_DECLARE_INSTRUCTION(MULXQ); // 0xb2
CYBER_180_CP_DECLARE_INSTRUCTION(ENTA); // 0xb3
CYBER_180_CP_DECLARE_INSTRUCTION(CMPXA); // 0xb4
CYBER_180_CP_DECLARE_INSTRUCTION(CALLSEG); // 0xb5
CYBER_180_CP_DECLARE_INSTRUCTION(RESERVEDBD); // 0xbd
CYBER_180_CP_DECLARE_INSTRUCTION(RESERVEDBE); // 0xbe
CYBER_180_CP_DECLARE_INSTRUCTION(RESERVEDBF); // 0xbf

CYBER_180_CP_DECLARE_INSTRUCTION(EXECUTE); // 0xc0...0xc7

CYBER_180_CP_DECLARE_INSTRUCTION(LBYTS); // 0xd0...0xd7
CYBER_180_CP_DECLARE_INSTRUCTION(SBYTS); // 0xd8...0xdf

CYBER_180_CP_DECLARE_INSTRUCTION(SCLN); // 0xe4
CYBER_180_CP_DECLARE_INSTRUCTION(SCLR); // 0xe5
CYBER_180_CP_DECLARE_INSTRUCTION(CMPC); // 0xe9
CYBER_180_CP_DECLARE_INSTRUCTION(TRANB); // 0xeb
CYBER_180_CP_DECLARE_INSTRUCTION(EDIT); // 0xed

CYBER_180_CP_DECLARE_INSTRUCTION(SCNB); // 0xf3
CYBER_180_CP_DECLARE_INSTRUCTION(MOVI); // 0xf9
CYBER_180_CP_DECLARE_INSTRUCTION(CMPI); // 0xfa
CYBER_180_CP_DECLARE_INSTRUCTION(ADDI); // 0xfb


#undef CYBER_180_CP_DECLARE_INSTRUCTION


CYBER_HEADER_END

#endif /* __CYBER_CYBER180CPINSTRUCTIONS_INTERNAL_H__ */
